########################################################################################################################
# Summary:             BLEN substitutions file to generate PVs for CPSW registers
# Author:              C. Ford <caf@slac.stanford.edu>
# Date:                19-mar-2017 
# YAML config version: AmcCarrierBlen_00000016
########################################################################################################################

########################################################################################################################
# Macros:
#   P,R: The PV name as $(P):$(R)
#   DESC, PINI, SCAN, NELM, etc.: The same fields on the records
#   PORT: The asyn port name. It must match the port name given when calling "YCPSWASYNConfig" on st.cmd
#   PARAM: The asyn paramter name. It must be defined in the dictionary file and assigned to a register
#   AMC: The AMC hardware slot (0 or 1)
########################################################################################################################

#======================================
# Registers with ScalVal_RO interfaces
#======================================
# Single register
file "RegisterIn.template" { pattern
{ P,          R,              DESC,                           PINI,   SCAN,       PORT, EGU,  PARAM         }
#{ $(P), RATE,           "Trigger rate over 1 sec",      "YES",  "1 second", $(PORT),   "Hz", AMC$(AMC):SENS0:RATE          }
{ $(P), AmcClkFreq,     "AMC Clock frequency",          "YES",  "1 second", $(PORT),   "Hz", AMC$(AMC):AmcClkFreq    }
{ $(P), DSPVers,        "System generator core vers",   "YES",  "1 second", $(PORT),   "",   AMC$(AMC):Version       }
}

# Array of register
file "RegisterArrayIn.template" { pattern
{ P,          R,             DESC,                          NELM,   PINI,   SCAN,       PORT,  PARAM       }
}

# Array of 8-bit register as a string
file "RegisterArrayChar.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,  PARAM       }
}

# ENUM register
file "RegisterEnumBIn.template" { pattern
{ P,        R,              DESC,                    PINI,   ZNAM,       ONAM,       SCAN,      PORT, PARAM     }
}

#======================================
# Register with ScalVal interfaces
#======================================

#file "RegisterOut.template" { pattern
#{ P,        R,              DESC,                                       PINI,   SCAN,       PORT,  PARAM       }
#{ $(P), ModeS0,             "BLEN mode, sensor 0"               "NO",   "Passive",  $(PORT),    AMC$(AMC):SENS0:Mode }
#{ $(P), ModeS1,             "BLEN mode, sensor 1"               "NO",   "Passive",  $(PORT),    AMC$(AMC):SENS1:Mode }
#{ $(P), NumSamp0,           "Number of samples 0, sensor 0"     "NO",   "Passive",  $(PORT),    AMC$(AMC):SENS0:NumSamp0 }
#{ $(P), NumSamp1,           "Number of samples 1, sensor 0"     "NO",   "Passive",  $(PORT),    AMC$(AMC):SENS0:NumSamp1 }
#{ $(P), TrigDelay1,       ""                                  "NO",   "Passive",  $(PORT),    AMC$(AMC):SENS0:TrigDelay1 }
#{ $(P), TrigDelay2,       ""                                  "NO",   "Passive",  $(PORT),    AMC$(AMC):SENS0:TrigDelay2 }
#}

#file "RegisterOutRBV.template" { pattern
#{ P,    R,                   DESC,                               PINI,   SCAN,        PORT,       PARAM       }
#{ $(P), ModeS0RBV,           "BLEN mode, sensor 0"               "YES",  "1 second",  $(PORT),    AMC$(AMC):SENS0:Mode }
#{ $(P), ModeS1RBV,           "BLEN mode, sensor 1"               "YES",  "1 second",  $(PORT),    AMC$(AMC):SENS1:Mode }
#{ $(P), NumSamp0RBV,         "Number of samples 0, sensor 0"     "YES",  "1 second",  $(PORT),    AMC$(AMC):SENS0:NumSamp0 }
#{ $(P), NumSamp1RBV,         "Number of samples 1, sensor 0"     "YES",  "1 second",  $(PORT),    AMC$(AMC):SENS0:NumSamp1 }
#{ $(P), TrigDelay1RBV,     ""                                  "YES",  "1 second",  $(PORT),    AMC$(AMC):SENS0:TrigDelay1 }
#{ $(P), TrigDelay2RBV,     ""                                  "YES",  "1 second",  $(PORT),    AMC$(AMC):SENS0:TrigDelay2 }
#}

# ENUM register
file "RegisterEnumBOut.template" { pattern
{ P,        R,              DESC,        PINI,  ZNAM,        ONAM,     SCAN,       PORT, PARAM     }
{ $(P), AutoRearm,   "Auto rearm", "NO",  "Disabled", "Enabled", "Passive",  $(PORT),   AMC$(AMC):AutoRearm }
}

file "RegisterEnumBOutRBV.template" { pattern
{ P,        R,              DESC,         PINI,   ZNAM,        ONAM,     SCAN,        PORT, PARAM     }
{ $(P), AutoRearmRBV, "Auto rearm", "YES",  "Disabled", "Enabled", ".5 second",  $(PORT),   AMC$(AMC):AutoRearm }
}

#======================================
# Register with DoubleVal_RO interfaces
#======================================

file "RegisterDoubleIn.template" { pattern
{ P,        R,                DESC,                     PINI,   SCAN,         PORT,       EGU,        PARAM                     }
{ $(P),     AddSums0,         "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums0        }
{ $(P),     AddSums2,         "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums2        }
{ $(P),     AddSums3,         "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums3        }
{ $(P),     AddSums4,         "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums4        }
{ $(P),     AddSums5,         "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums5        }
{ $(P),     AddSums0Gap,      "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums0Gap     }
{ $(P),     AddSums1Gap,      "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums1Gap     }
{ $(P),     AddSums2Sensors,  "",                       "YES",  ".5 second",  $(PORT),    "",         AMC$(AMC):AddSums2Sensors }
}

#======================================
# Register with DoubleVal interfaces
#======================================

file "RegisterDoubleOut.template" { pattern
{ P,              R,            DESC,                   PINI,  SCAN,        PORT,        EGU,          PARAM      }
{ $(P),     CoefA0,       "Coef A0 for 1st group",      "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefA0 }
{ $(P),     CoefA1,       "Coef A1 for 2nd group",      "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefA1 }
{ $(P),     CoefA2,       "Coef A2 for 3rd group",      "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefA2 }
{ $(P),     CoefA3,       "Coef A3 Scale 1st group",    "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefA3 }
{ $(P),     CoefA4,       "Coef A4 Scale 2nd group",    "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefA4 }
{ $(P),     CoefA5,       "Coef A5 Scale 3rd group",    "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefA5 }
{ $(P),     CoefB,        "Coef B",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefB  }
{ $(P),     CoefC,        "Coef C",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefC  }
{ $(P),     CoefD,        "Coef D",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefD  }
{ $(P),     CoefE,        "Coef E",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefE  }
{ $(P),     CoefF,        "Coef F",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefF  }
{ $(P),     CoefG,        "Coef G",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefG  }
{ $(P),     CoefH,        "Coef H",                     "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefH  }
{ $(P),     CoefI,        "Coef I - Offset",            "YES",  "Passive",   $(PORT),     "",     AMC$(AMC):CoefI  }
}

file "RegisterDoubleOutRBV.template" { pattern
{ P,              R,            DESC,                   PINI,  SCAN,        PORT,        EGU,          PARAM      }
{ $(P),     CoefA0RBV,    "Coef A0 for 1st group",      "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefA0 }
{ $(P),     CoefA1RBV,    "Coef A1 for 2nd group",      "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefA1 }
{ $(P),     CoefA2RBV,    "Coef A2 for 3rd group",      "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefA2 }
{ $(P),     CoefA3RBV,    "Coef A3 Scale 1st group",    "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefA3 }
{ $(P),     CoefA4RBV,    "Coef A4 Scale 2nd group",    "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefA4 }
{ $(P),     CoefA5RBV,    "Coef A5 Scale 3rd group",    "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefA5 }
{ $(P),     CoefBRBV,     "Coef B",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefB  }
{ $(P),     CoefCRBV,     "Coef C",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefC  }
{ $(P),     CoefDRBV,     "Coef D",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefD  }
{ $(P),     CoefERBV,     "Coef E",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefE  }
{ $(P),     CoefFRBV,     "Coef F",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefF  }
{ $(P),     CoefGRBV,     "Coef G",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefG  }
{ $(P),     CoefHRBV,     "Coef H",                     "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefH  }
{ $(P),     CoefIRBV,     "Coef I - Offset",            "YES", "1 second",  $(PORT),     "",     AMC$(AMC):CoefI  }
}

#======================================
# Register with Command interfaces
#======================================
file "RegisterCommand.template" { pattern
{ P,            R,            DESC,                      PINI,   SCAN,         PORT,             PARAM          }
{ $(P),   InitAmcCard,  "Init JESD modules",             "NO",  "Passive",   $(PORT),     AMC$(AMC):InitAmcCard }
}

#======================================
# Register with Stream interfaces
#======================================


# Note: NELM is 2x actual number of elements
file "RegisterStream16.template" { pattern
{ P,           R,             DESC,                                NELM,   PINI,         PORT,            PARAM                      }
{ $(P),       R_WF            "Raw data (16-bit)",                 1024,   "YES",        $(PORT),        AMC$(AMC):StreamRaw:16      } 
{ $(P),       IWF             "Integration Window (16-bit)",       1024,   "NO",         $(PORT),        AMC$(AMC):WeightFunction:16 } 
}
