########################################################################################################################
# Summary:             Carrier substitutions file to generate PVs for CPSW registers
########################################################################################################################

# Registers in this file represent the non-public or expert interface.

########################################################################################################################
# Macros:
#   P,R: The PV name as $(P):$(R)
#   DESC, PINI, SCAN, NELM, etc.: The same fields on the records
#   PORT: The asyn port name. It must match the port name given when calling "YCPSWASYNConfig" on st.cmd
#   PARAM: The asyn paramter name. It must be defined in the dictionary file blenLCLS2.dict and assigned to a register
########################################################################################################################

#======================================
# Registers with ScalVal_RO interfaces
#======================================
# Single register
file "RegisterIn.template" { pattern
{ P,          R,              DESC,                               PINI,     SCAN,       PORT,   EGU,      PARAM          }
{ $(P), DeviceDna,      "Xilinx Device DNA",                      "YES",  "Passive",  $(PORT),   "",   STAT:DeviceDna    }
{ $(P), FpgaVersion,    "FPGA Firmware Version Number",           "YES",  "Passive",  $(PORT),   "",   STAT:FpgaVersion  }
{ $(P), UpTimeCnt,      "Seconds since last reset",               "YES",  "1 second", $(PORT),   "s",  STAT:UpTimeCnt    }
{ $(P), DeviceId,       "Device Identification",                  "YES",  "Passive",  $(PORT),   "",   STAT:DeviceId     }
{ $(P), ServerRemoteIp, "Backplane Rem Srv IP",                   "YES",  "1 second", $(PORT),   "",   CONF:ServerRemoteIp}
{ $(P), ServerRemotePort,"Backplane Rem Srv Port",                "YES",  "1 second", $(PORT),   "",   CONF:ServerRemotePort}
# BSA status
{ $(P), SofCount,       "BSA: Start of Frame Count",              "YES",  "1 second", $(PORT),   "",   BSA:sofCount      }
{ $(P), EofCount,       "BSA: End of Frame Count",                "YES",  "1 second", $(PORT),   "",   BSA:eofCount      }
{ $(P), CrcErrCount,    "BSA: CRC error count",                   "YES",  "1 second", $(PORT),   "",   BSA:CrcErrCount   }
{ $(P), RxClkCount,     "BSA: Recovered clk count /16",           "YES",  "1 second", $(PORT),   "",   BSA:RxClkCount    }
{ $(P), RxRstCount,     "BSA: Recieve link reset count",          "YES",  "1 second", $(PORT),   "",   BSA:RxRstCount    }
{ $(P), RxDecErrCount,  "BSA: Recieve 8b/10b decode error count", "YES",  "1 second", $(PORT),   "",   BSA:RxDecErrCount }
{ $(P), RxDspErrCount,  "BSA: Recieve disparity error count",     "YES",  "1 second", $(PORT),   "",   BSA:RxDspErrCount }
# CmnConfig status
{ $(P), TmitTimeUp,     "TMIT Time Stamp Upper Part",             "YES",  "1 second", $(PORT),   "",   STAT:TmitTimeUp   }
{ $(P), TmitTimeLow,    "TMIT Time Stamp Lower Part",             "YES",  "1 second", $(PORT),   "",   STAT:TmitTimeLow  }
{ $(P), TmitStatus0,    "BPM0 Tmit Status",                       "YES",  "1 second", $(PORT),   "",   STAT:TmitStatus0  }
{ $(P), TmitStatus1,    "BPM1 Tmit Status",                       "YES",  "1 second", $(PORT),   "",   STAT:TmitStatus1  }
{ $(P), TmitTmit0,      "BPM0 Tmit",                              "YES",  "1 second", $(PORT),   "",   STAT:TmitTmit0    }
{ $(P), TmitTmit1,      "BPM1 Tmit",                              "YES",  "1 second", $(PORT),   "",   STAT:TmitTmit1    }
{ $(P), LclTimeUp,      "Local Time Stamp Upper Part",            "YES",  "1 second", $(PORT),   "",   STAT:LclTimeUp    }
{ $(P), LclTimeLow,     "Local Time Stamp Lower Part",            "YES",  "1 second", $(PORT),   "",   STAT:LclTimeLow   }
{ $(P), TmitInvalid,    "",                                       "YES",  "1 second", $(PORT),   "",   STAT:TmitInvalid  }
{ $(P), TmitSmall,      "Indicate TMIT is too small",             "YES",  "1 second", $(PORT),   "",   STAT:TmitSmall    }
{ $(P), StatusOfBsa0,   "",                                       "YES",  "1 second", $(PORT),   "",   STAT:Bsa0         }
{ $(P), StatusOfBsa1,   "",                                       "YES",  "1 second", $(PORT),   "",   STAT:Bsa1         }
{ $(P), StatusOfBsa2,   "",                                       "YES",  "1 second", $(PORT),   "",   STAT:Bsa2         }
# MoverCntl status
{ $(P), StatusLimitSw,  "",                                       "YES",  "1 second", $(PORT),   "",   MVR:StatusLimitSw }
{ $(P), Inserted,       "",                                       "YES",  "1 second", $(PORT),   "",   MVR:Inserted      }
{ $(P), Removed,        "",                                       "YES",  "1 second", $(PORT),   "",   MVR:Removed       }
}

file "RegisterInAlarms.template" { pattern
{ P,           R, DESC, NELM,    PINI,       SCAN,     PORT,  LOLO, HIHI,    LLSV,       HHSV,   PARAM     }
{ $(P), RxLinkUp,   "",   20,   "YES",  "1 second",  $(PORT),    0,    1, "MAJOR", "NO_ALARM",  RxLinkup   }
}

# Array of register
file "RegisterArrayIn.template" { pattern
{ P,          R,             DESC,                          NELM,   PINI,   SCAN,       PORT,  PARAM       }
}

# Array of 8-bit register as a string
file "RegisterArrayChar.template" { pattern
{ P,        R,              DESC,                           NELM,   PINI,   SCAN,       PORT,  PARAM       }
# Shared
{ $(P), BuildStamp,     "Firmware Build String",        256,     "YES",  "Passive",  $(PORT),  STAT:BuildStamp }
}

# ENUM register
file "RegisterEnumBIn.template" { pattern
{ P,        R,              DESC,                    PINI,   ZNAM,       ONAM,       SCAN,      PORT, PARAM     }
}

#======================================
# Register with ScalVal interfaces
#======================================

file "RegisterOut.template" { pattern
{ P,        R,              DESC,                                  PINI,   SCAN,       PORT,  PARAM       }
{ $(P), ScratchPad,     "Register to test R/W"                     "NO",   "Passive",  $(PORT),    :ScratchPad }
# BSA
{ $(P), ClkSel,         "Select between LCLS-I/II timing",         "YES",  "Passive",  $(PORT),    TIME:ClkSel }
{ $(P), RxPolarity,     "",                                        "NO",   "Passive",  $(PORT),    BSA:RxPolarity }
{ $(P), PhaseTarget,    "",                                        "NO",   "Passive",  $(PORT),    BSA:PhaseTarget }
# CmnConfig
{ $(P), AppType,        "",                                        "NO",   "Passive",  $(PORT),    CONF:AppType }
{ $(P), CalibEnable,    "",                                        "NO",   "Passive",  $(PORT),    CONF:CalibEnable }
{ $(P), Location,       "",                                        "NO",   "Passive",  $(PORT),    CONF:Location }
{ $(P), SelBpm,         "BPM0/BPM1 Incoming Stream",               "YES",  "Passive",  $(PORT),    CONF:SelBpm }
{ $(P), TreshTmit,      "",                                        "NO",   "Passive",  $(PORT),    CONF:TreshTmit }
# MoverCntl
{ $(P), MoverOnOff,     "",                                        "NO",   "Passive",  $(PORT),    MVR:MoverOnOff }
{ $(P), IgnoreMover,    "",                                        "NO",   "Passive",  $(PORT),    MVR:IgnoreMover }
}

file "RegisterOutRBV.template" { pattern
{ P,           R,                DESC,                PINI,      SCAN,      PORT,        PARAM           }
# Shared
{ $(P), ScratchPadRBV,  "Register to test R/W",        "YES",  "1 second",  $(PORT),    :ScratchPad      }
# BSA
{ $(P), ClkSelRBV,  "",                                "YES",  "1 second",  $(PORT),    TIME:ClkSel      }
{ $(P), RxPolarityRBV,  "",                            "YES",  "1 second",  $(PORT),    BSA:RxPolarity   }
{ $(P), PhaseTargetRBV, "",                            "YES",  "1 second",  $(PORT),    BSA:PhaseTarget  }
# CmnConfig
{ $(P), AppTypeRBV,     "",                            "YES",  "1 second",  $(PORT),    CONF:AppType     }
{ $(P), CalibEnableRBV, "",                            "YES",  "1 second",  $(PORT),    CONF:CalibEnable }
{ $(P), LocationRBV,    "",                            "YES",  "1 second",  $(PORT),    CONF:Location    }
{ $(P), SelBpmRBV,      "BPM0/BPM1 Incoming Stream",   "YES",  "1 second",  $(PORT),    CONF:SelBpm      }
{ $(P), TreshTmitRBV,   "",                            "YES",  "1 second",  $(PORT),    CONF:TreshTmit   }
# MoverCntl
{ $(P), MoverOnOffRBV,  "",                            "YES",  ".5 second",  $(PORT),    MVR:MoverOnOff   }
{ $(P), IgnoreMoverRBV, "",                            "YES",  "1 second",  $(PORT),    MVR:IgnoreMover  }
}

#======================================
# Register with DoubleVal interfaces
#======================================

file "RegDoubleOut.template" { pattern
{ P,          R,                     DESC,                   PINI,      SCAN,      PORT,     EGU,   PREC,        PARAM        }
{ $(P), Attenuation0,  "Set Filter State 0 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation0   }
{ $(P), Attenuation1,  "Set Filter State 1 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation1   }
{ $(P), Attenuation2,  "Set Filter State 2 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation2   }
{ $(P), Attenuation3,  "Set Filter State 3 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation3   }
{ $(P), Attenuation4,  "Set Filter State 4 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation4   }
{ $(P), Attenuation5,  "Set Filter State 5 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation5   }
{ $(P), Attenuation6,  "Set Filter State 6 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation6   }
{ $(P), Attenuation7,  "Set Filter State 7 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation7   }
{ $(P), Attenuation8,  "Set Filter State 8 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation8   }
{ $(P), Attenuation9,  "Set Filter State 9 Attenuation",     "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation9   }
{ $(P), Attenuation10, "Set Filter State 10 Attenuation",    "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation10  }
{ $(P), Attenuation11, "Set Filter State 11 Attenuation",    "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation11  }
{ $(P), Attenuation12, "Set Filter State 12 Attenuation",    "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation12  }
{ $(P), Attenuation13, "Set Filter State 13 Attenuation",    "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation13  }
{ $(P), Attenuation14, "Set Filter State 14 Attenuation",    "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation14  }
{ $(P), Attenuation15, "Set Filter State 15 Attenuation",    "YES",   "Passive",  $(PORT),   "",    "7",   MVR:Attenuation15  }
}

file "RegDoubleOutRBV.template" { pattern
{ P,           R,                     DESC,                 PINI,         SCAN,      PORT,     EGU,   PREC,        PARAM         }
{ $(P), Attenuation0RBV,  "Filter State 0 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation0    }
{ $(P), Attenuation1RBV,  "Filter State 1 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation1    }
{ $(P), Attenuation2RBV,  "Filter State 2 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation2    }
{ $(P), Attenuation3RBV,  "Filter State 3 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation3    }
{ $(P), Attenuation4RBV,  "Filter State 4 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation4    }
{ $(P), Attenuation5RBV,  "Filter State 5 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation5    }
{ $(P), Attenuation6RBV,  "Filter State 6 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation6    }
{ $(P), Attenuation7RBV,  "Filter State 7 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation7    }
{ $(P), Attenuation8RBV,  "Filter State 8 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation8    }
{ $(P), Attenuation9RBV,  "Filter State 9 Attenuation",     "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation9    }
{ $(P), Attenuation10RBV, "Filter State 10 Attenuation",    "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation10   }
{ $(P), Attenuation11RBV, "Filter State 11 Attenuation",    "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation11   }
{ $(P), Attenuation12RBV, "Filter State 12 Attenuation",    "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation12   }
{ $(P), Attenuation13RBV, "Filter State 13 Attenuation",    "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation13   }
{ $(P), Attenuation14RBV, "Filter State 14 Attenuation",    "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation14   }
{ $(P), Attenuation15RBV, "Filter State 15 Attenuation",    "YES",   ".5 second",  $(PORT),   "",    "7",   MVR:Attenuation15   }
}
